/*!
 * angular-spring-data-rest 0.4.2
 * Copyright 2015 Guy Brand (@guy_labs)
 * https://github.com/guylabs/angular-spring-data-rest
 */
!function () {
    "use strict";
    function a(b) {
        return angular.forEach(arguments, function (c) {
            c !== b && angular.forEach(c, function (c, d) {
                b[d] && b[d].constructor && b[d].constructor === Object ? a(b[d], c) : b[d] = c
            })
        }), angular.copy(b)
    }

    function b(a, b, c, d) {
        var e = a[b];
        if (e) {
            var f = {};
            if (f[c] = {}, d === !0)angular.forEach(Object.keys(e), function (a) {
                f[c][a] = e[a]
            }); else {
                var g = Object.keys(e)[0];
                f[c] = e[g]
            }
            a = angular.extend(a, f), delete a[b]
        }
        return a
    }

    function c(a, b) {
        return b && (a = e(a)), a
    }

    function d(a, b, c) {
        if (void 0 == a || !a)throw new Error("The provided resource name '" + b + "' has no valid URL in the '" + c + "' property.");
        return a
    }

    function e(a) {
        return a.replace(/{.*}/g, "")
    }

    function f(a) {
        var b = {}, c = /{\?(.*)}/g, d = c.exec(a)[1].split(",");
        return angular.forEach(d, function (a) {
            b[a] = ""
        }), b
    }

    angular.module("spring-data-rest", ["ngResource"]), angular.module("spring-data-rest").provider("SpringDataRestAdapter", function () {
        var e = {
            linksKey: "_links",
            linksHrefKey: "href",
            linksSelfLinkName: "self",
            embeddedKey: "_embedded",
            embeddedNewKey: "_embeddedItems",
            embeddedNamedResources: !1,
            resourcesKey: "_resources",
            resourcesFunction: void 0,
            fetchFunction: void 0,
            fetchAllKey: "_allLinks"
        };
        return {
            config: function (b) {
                if ("undefined" != typeof b) {
                    if (!angular.isObject(b))throw new Error("The given configuration '" + b + "' is not an object.");
                    if (void 0 != b.resourcesFunction && "function" != typeof b.resourcesFunction)throw new Error("The given resource function '" + b.resourcesFunction + "' is not of type function.");
                    if (void 0 != b.fetchFunction && "function" != typeof b.fetchFunction)throw new Error("The given fetch function '" + b.fetchFunction + "' is not of type function.");
                    e = a(e, b)
                }
                return e
            }, $get: ["$injector", function (a) {
                function g(b, c, d, f) {
                    return void 0 == e.resourcesFunction ? a.get("$resource")(b, c, d, f) : e.resourcesFunction(b, c, d, f)
                }

                function h(b, c, d, f, g) {
                    if (void 0 == e.fetchFunction) {
                        var h = [];
                        return h.push(a.get("$http").get(b).then(function (a) {
                            return g ? i(a.data, f, !0).then(function (a) {
                                d[c] = a
                            }) : i(a.data).then(function (a) {
                                d[c] = a
                            })
                        }, function (b) {
                            return 404 != b.status ? a.get("$q").reject(b) : void 0
                        })), a.get("$q").all(h)
                    }
                    return e.fetchFunction(b, c, d, f, g)
                }

                var i = function j(i, k, l) {
                    function m(a, b) {
                        var f = d(a[e.linksKey][b][e.linksHrefKey], b, e.linksHrefKey);
                        return c(f, a[e.linksKey][b].templated)
                    }

                    function n(a) {
                        return "string" == typeof a && a.indexOf("/") > 0
                    }

                    function o(a) {
                        if (n(a)) {
                            var b = a.indexOf("/");
                            return [a.substr(0, b), a.substr(b, a.length)]
                        }
                    }

                    return a.get("$q").when(i).then(function (c) {
                        var d = function (a, b, d, h) {
                            var i = this[e.linksKey], j = b, k = "";
                            if (n(a)) {
                                var l = o(a);
                                a = l[0], k = l[1]
                            }
                            if (angular.isObject(a)) {
                                if (!a.name)throw new Error("The provided resource object must contain a name property.");
                                var p = a.parameters;
                                return b && angular.isObject(b) ? j = p && angular.isObject(p) ? angular.extend(angular.copy(b), angular.copy(p)) : angular.copy(b) : p && angular.isObject(p) && (j = angular.copy(p)), angular.forEach(j, function (a, b) {
                                    "" === a && delete j[b]
                                }), g(m(c, a.name), j, d, h)
                            }
                            if (a in i)return g(m(c, a) + k, j, d, h);
                            var q = [];
                            return angular.forEach(i, function (a, b) {
                                if (a.templated) {
                                    var c = f(a[e.linksHrefKey]);
                                    q.push({name: b, parameters: c})
                                } else q.push({name: b})
                            }), q
                        };
                        if (c && c.data && (c = c.data), !angular.isObject(c) || c instanceof Array)return a.get("$q").reject("Given data '" + c + "' is not of type object.");
                        if (k && !(k instanceof Array || "string" == typeof k))return a.get("$q").reject("Given fetch links '" + k + "' is not of type array or string.");
                        var i = void 0, p = [];
                        if (e.linksKey in c) {
                            var q = {};
                            q[e.resourcesKey] = d, i = angular.extend(angular.copy(c), q), void 0 != k && angular.forEach(c[e.linksKey], function (a, b) {
                                b != e.linksSelfLinkName && (k == e.fetchAllKey || "string" == typeof k && b == k || k instanceof Array && k.indexOf(b) >= 0) && p.push(h(m(c, b), b, i, k, l))
                            })
                        }
                        return e.embeddedKey in c && (i || (i = angular.copy(c)), i = b(i, e.embeddedKey, e.embeddedNewKey, e.embeddedNamedResources), angular.forEach(i[e.embeddedNewKey], function (a, b) {
                            if (a instanceof Array && a.length > 0) {
                                var c, d = [];
                                angular.forEach(a, function (a, b) {
                                    c = j({data: a}, k, l).then(function (a) {
                                        d[b] = a
                                    }), p.push(c)
                                }), c && c.then(function () {
                                    i[e.embeddedNewKey][b] = d
                                })
                            } else p.push(j({data: a}, k, l).then(function (a) {
                                i[e.embeddedNewKey][b] = a
                            }))
                        })), a.get("$q").all(p).then(function () {
                            return i ? i : c
                        })
                    })
                };
                return {process: i}
            }]
        }
    }), angular.module("spring-data-rest").provider("SpringDataRestInterceptor", ["$httpProvider", "SpringDataRestAdapterProvider", function (a) {
        return {
            apply: function () {
                a.interceptors.push("SpringDataRestInterceptor")
            }, $get: ["SpringDataRestAdapter", "$q", function (a) {
                return {
                    response: function (b) {
                        return a.process(b.data).then(function (a) {
                            return b.data = a, b
                        })
                    }
                }
            }]
        }
    }])
}();